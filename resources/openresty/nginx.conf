worker_processes auto;
error_log logs/error.log info;
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

stream {
    resolver 127.0.0.1;
    lua_add_variable $PORT;
    server {
        listen 80;
        listen [::]:80;
        listen 443 ssl reuseport backlog=4096;
        listen [::]:443 ssl reuseport;

        ssl_certificate_key /usr/local/cert/key.pem;
        ssl_certificate /usr/local/cert/cert.pem;
        ssl_preread on;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:20m;
        ssl_protocols TLSv1.1 TLSv1 TLSv1.2 TLSv1.3;
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
        ssl_prefer_server_ciphers on;

        proxy_buffer_size 256k;
        preread_buffer_size 58;

        preread_by_lua_block {
            local sock, err = ngx.req.socket()

            if sock then
            -- ngx.say("got the request socket")
            else
            ngx.say("failed to get the request socket: ", err)
            end

            local data, err = sock:peek(58)

            if string.match(data, "HTTP/2.0") then
            -- for HTTP2
            ngx.var.PORT = "50001"
            elseif string.match(data, "HTTP") then
            -- for Normal http
            ngx.var.PORT = "50000"
            elseif string.byte(data:sub(57), 1, 2) == 13 then
            -- for Trojan
            ngx.var.PORT = "TROJAN_TCP_PORT"
            else
            -- for V2Ray
            ngx.var.PORT = "VMESS_TCP_PORT"
            end

            ngx.log(ngx.INFO, "Data: ", data)
            ngx.log(ngx.INFO, "TCP stream connection logged with port: ", ngx.var.PORT)
        }
        proxy_pass 127.0.0.1:$PORT;
    }
}

http {
    include mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log logs/access.log main;
    sendfile on;

    keepalive_timeout 65;

    server {
        listen 50000;
        listen 50001 http2 so_keepalive=on;
        server_name DOMAIN;

        access_log logs/host.access.log main;

        LOCATION_PLACEHOLDER
    }
}